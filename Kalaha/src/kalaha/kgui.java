/** This class handles all JFrame window related things.
 * In order to make the game a bit easier to follow, there is a countdown to show
 * how the balls are placed, and indicates when the last ball was placed in an
 * empty bowl (placing this and the opposing bowl's balls in the 'big' bowl.
 *
 */
package kalaha;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.UIManager;

/**
 *
 * @author Matt
 */
public class kgui extends javax.swing.JFrame {

    /**
     * Creates new form kgui
     */
    private static JButton[] buttons;
    private static JButton options_button;
    private static JButton reset_button;
    public static Timer[] blinktimers;
    public static ActionListener[] listeners;
    //This sets how many times should the a button blink red.
    private static final int blinks = 8;

    //Delay between blinkers, in milliseconds
    public static int delay = 50;
    private static int initial_delay = 0;

    private static Color color_background;

    public kgui() {
        initComponents();

        buttons = new JButton[]{
            jButton1, jButton2, jButton3, jButton4, jButton5, jButton6, jButton13,
            jButton7, jButton8, jButton9, jButton10, jButton11, jButton12, jButton14,
            jButton15};
        for (int i = 0; i < buttons.length - 1; i++) {
            buttons[i].setText("6");
            buttons[i].setFocusable(false);
            buttons[i].setEnabled(false);
            buttons[i].setContentAreaFilled(true);
            buttons[i].setOpaque(true);
        }

        buttons[14].setText("Counter");
        buttons[14].setVisible(false);
        buttons[14].setBackground(java.awt.Color.RED);
        buttons[14].setEnabled(false);

        buttons[13].setText("Your bowl");
        buttons[13].setEnabled(false);
        buttons[6].setText("Enemy bowl");
        buttons[6].setEnabled(false);

        options_button = jButton16;
        reset_button = jButton17;

        super.setResizable(false);
        //Centers the window to the middle of the screen.
        setLocationRelativeTo(this);
        super.setTitle("Kalaha");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton1.setText("jButton1");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton1MouseExited(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton2.setText("jButton2");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton2MouseExited(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton3.setText("jButton3");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton3MouseExited(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton4.setText("jButton4");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton4MouseExited(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton5.setText("jButton5");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton5MouseExited(evt);
            }
        });
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton6.setText("jButton6");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton6MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton6MouseExited(evt);
            }
        });
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton7.setText("jButton7");
        jButton7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton7MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton7MouseExited(evt);
            }
        });
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton8.setText("jButton8");
        jButton8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton8MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton8MouseExited(evt);
            }
        });
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton9.setText("jButton9");
        jButton9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton9MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton9MouseExited(evt);
            }
        });
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton10.setText("jButton10");
        jButton10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton10MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton10MouseExited(evt);
            }
        });
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton11.setText("jButton11");
        jButton11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton11MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton11MouseExited(evt);
            }
        });
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton12.setText("jButton12");
        jButton12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton12MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton12MouseExited(evt);
            }
        });
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        jButton13.setText("jButton13");

        jButton14.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        jButton14.setText("jButton14");

        jButton15.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jButton15.setText("jButton15");

        jButton16.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton16.setText("?");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setText("O");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton10, jButton11, jButton12, jButton2, jButton3, jButton4, jButton5, jButton6, jButton7, jButton8, jButton9});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton13, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                    .addComponent(jButton14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jButton10, jButton11, jButton12, jButton2, jButton3, jButton4, jButton5, jButton6, jButton7, jButton8, jButton9});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // <editor-fold defaultstate="collapsed" desc="Action events, do not modify"> 
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        eventHandler(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        eventHandler(1);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        eventHandler(2);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        eventHandler(3);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        eventHandler(4);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        eventHandler(5);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        eventHandler(7);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        eventHandler(8);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        eventHandler(9);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        eventHandler(10);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        eventHandler(11);
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        eventHandler(12);
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseEntered
        mouseEntered(0);
    }//GEN-LAST:event_jButton1MouseEntered

    private void jButton2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseEntered
        mouseEntered(1);
    }//GEN-LAST:event_jButton2MouseEntered

    private void jButton3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseEntered
        mouseEntered(2);
    }//GEN-LAST:event_jButton3MouseEntered

    private void jButton4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseEntered
        mouseEntered(3);
    }//GEN-LAST:event_jButton4MouseEntered

    private void jButton5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseEntered
        mouseEntered(4);
    }//GEN-LAST:event_jButton5MouseEntered

    private void jButton6MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseEntered
        mouseEntered(5);
    }//GEN-LAST:event_jButton6MouseEntered

    private void jButton7MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton7MouseEntered
        mouseEntered(7);
    }//GEN-LAST:event_jButton7MouseEntered

    private void jButton8MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton8MouseEntered
        mouseEntered(8);
    }//GEN-LAST:event_jButton8MouseEntered

    private void jButton9MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton9MouseEntered
        mouseEntered(9);
    }//GEN-LAST:event_jButton9MouseEntered

    private void jButton10MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton10MouseEntered
        mouseEntered(10);
    }//GEN-LAST:event_jButton10MouseEntered

    private void jButton11MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton11MouseEntered
        mouseEntered(11);
    }//GEN-LAST:event_jButton11MouseEntered

    private void jButton12MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton12MouseEntered
        mouseEntered(12);
    }//GEN-LAST:event_jButton12MouseEntered

    private void jButton1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseExited
        mouseLeft(0);
    }//GEN-LAST:event_jButton1MouseExited

    private void jButton2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseExited
        mouseLeft(1);
    }//GEN-LAST:event_jButton2MouseExited

    private void jButton3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseExited
        mouseLeft(2);
    }//GEN-LAST:event_jButton3MouseExited

    private void jButton4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseExited
        mouseLeft(3);
    }//GEN-LAST:event_jButton4MouseExited

    private void jButton5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseExited
        mouseLeft(4);
    }//GEN-LAST:event_jButton5MouseExited

    private void jButton6MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseExited
        mouseLeft(5);
    }//GEN-LAST:event_jButton6MouseExited

    private void jButton7MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton7MouseExited
        mouseLeft(7);
    }//GEN-LAST:event_jButton7MouseExited

    private void jButton8MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton8MouseExited
        mouseLeft(8);
    }//GEN-LAST:event_jButton8MouseExited

    private void jButton9MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton9MouseExited
        mouseLeft(9);
    }//GEN-LAST:event_jButton9MouseExited

    private void jButton10MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton10MouseExited
        mouseLeft(10);
    }//GEN-LAST:event_jButton10MouseExited

    private void jButton11MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton11MouseExited
        mouseLeft(11);
    }//GEN-LAST:event_jButton11MouseExited

    private void jButton12MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton12MouseExited
        mouseLeft(12);
    }//GEN-LAST:event_jButton12MouseExited

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        try {
            updateUI();
        } catch (IOException ex) {
            System.err.println("darn it, freezing");
        }
        inputUI.main(new String[0]);

        try {
            updateUI();
            //turnStarter(Kalaha.yourturn);
        } catch (IOException ex) {
        }
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        try {
            updateUI();
            Kalaha.reset();
            updateUI();
            turnStarter(Kalaha.yourturn);
        } catch (IOException ex) {
            System.err.println("darn it, freezing");
        }
    }//GEN-LAST:event_jButton17ActionPerformed
    // </editor-fold>

    /**
     * @param args the command line arguments
     * @throws IOException
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    //javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            //javax.swing.UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(kgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new kgui().setVisible(true);
        });
        updateUI();
        color_background = buttons[0].getBackground();
        turnStarter(Kalaha.yourturn);
    }

    //Upon the mouse entering a button's area, checks whether this bowl is a valid
    //  choice, and highlights the bowl where the last ball would end up to.
    public static void mouseEntered(int callerID) {
        if (buttons[callerID].isEnabled()) {
            int end_bowl = doFakeTurn(callerID);
            buttons[end_bowl].setBackground(javax.swing.plaf.ColorUIResource.BLUE);
            buttons[end_bowl].repaint();
        }
    }
    //Undoes the coloring done by the mouseEntered() method.
    public static void mouseLeft(int callerID) {
        if (buttons[callerID].isEnabled()) {
            int end_bowl = doFakeTurn(callerID);
            buttons[end_bowl].setBackground(color_background);
            buttons[end_bowl].repaint();
        }
    }

    //Upon choosing a bowl, disables the buttons and resolves the turn.
    public static void eventHandler(int callerID) {
        for (int i = 0; i < 14; i++) {
            buttons[i].setEnabled(false);
        }
        options_button.setEnabled(false);
        reset_button.setEnabled(false);
        try {
            doTurn(callerID);
        } catch (IOException ex) {
            System.err.println("darn it fix your game");
        }
    }

    public static void eventHandlerRest(int counter, int currentBowl) throws IOException {
        buttons[14].setVisible(false);
        buttons[14].repaint();
        updateUI();
        if (checkIfLastBallInEmptyBowl(counter, currentBowl)) {
            Timer waitforanimationtimer = new Timer((blinks + 2) * delay, (ActionEvent e) -> {
                try {
                    updateUI();
                    Kalaha.yourturn = 1 - Kalaha.yourturn;
                    turnStarter(Kalaha.yourturn);
                } catch (IOException ex) {
                }
            });
            waitforanimationtimer.setRepeats(false);
            waitforanimationtimer.start();
        } else {
            updateUI();
            Kalaha.yourturn = 1 - Kalaha.yourturn;
            turnStarter(Kalaha.yourturn);
        }
    }

    /**
     * This method checks the final rule, and also does all calculations.
     *
     * @param counter
     * @param currentBowl
     * @return True if the rule applies; false otherwise.
     */
    public static boolean checkIfLastBallInEmptyBowl(int counter, int currentBowl) {
        if (counter == 0
                && Kalaha.bowlNumbers[currentBowl] == 1
                && (currentBowl > 7 * Kalaha.yourturn - 1
                && currentBowl < 7 * Kalaha.yourturn + 6)) {

            //Must be divisible with 2
            blinktimers = new Timer[blinks];
            listeners = new ActionListener[blinks];

            for (int i = 0; i < blinks; i++) {
                checkIfLastBallInEmptyBowlColor(i, counter, currentBowl);
            }
            return true;
        }
        return false;
    }

    public static void checkIfLastBallInEmptyBowlColor(int i, int counter, int currentBowl) {
        blinktimers[i] = new Timer(delay, (listeners[i] = (ActionEvent e) -> {
            if (buttons[currentBowl].getBackground() != Color.RED) {
                buttons[currentBowl].setBackground(javax.swing.plaf.ColorUIResource.RED);
                buttons[12 - currentBowl].setBackground(javax.swing.plaf.ColorUIResource.RED);
                buttons[currentBowl].repaint();
                buttons[12 - currentBowl].repaint();
            } else {
                buttons[currentBowl].setBackground(color_background);
                buttons[12 - currentBowl].setBackground(color_background);
                buttons[currentBowl].repaint();
                buttons[12 - currentBowl].repaint();
            }
            if (i == listeners.length - 1) {
                checkIfLastBallInEmptyBowlRest(blinks, currentBowl);

            }
            blinktimers[i].stop();
        }));
        blinktimers[i].setRepeats(false);
        blinktimers[i].setInitialDelay(initial_delay);
        initial_delay += delay;
        blinktimers[i].start();
    }

    public static void checkIfLastBallInEmptyBowlRest(int counter, int currentBowl) {
        initial_delay = 0;
        Kalaha.bowlNumbers[currentBowl] = 0;
        Kalaha.bowlNumbers[6 + 7 * Kalaha.yourturn] += Kalaha.bowlNumbers[12 - currentBowl] + 1;
        Kalaha.bowlNumbers[12 - currentBowl] = 0;

        buttons[currentBowl].setText(Integer.toString(0));
        buttons[currentBowl].setEnabled(false);
        buttons[12 - currentBowl].setText(Integer.toString(0));
        buttons[12 - currentBowl].setEnabled(false);
        buttons[6 + 7 * Kalaha.yourturn].setText(Integer.toString(Kalaha.bowlNumbers[6 + 7 * Kalaha.yourturn]));
    }

    //This method does the same as the doTurn() in the Kalaha class, but outputs
    //  only which one would be the last bowl upon choosing the current one.
    public static int doFakeTurn(int callerID) {
        int counter = Kalaha.bowlNumbers[callerID];

        int currentBowl = callerID;

        while (counter > 0) {
            counter--;

            if (currentBowl < 6) {
            } else if (currentBowl > 6 && currentBowl < 13) {
            } else if ((currentBowl == 6 && Kalaha.yourturn == 0) || (currentBowl == 13 && Kalaha.yourturn == 1)) {
            } else {
                currentBowl++;
                currentBowl %= 14;
            }

            currentBowl++;
            currentBowl %= 14;
        }

        if ((currentBowl == 6) && Kalaha.yourturn == 1 || (currentBowl == 13 && Kalaha.yourturn == 0)) {
            currentBowl++;
            currentBowl %= 14;
        }

        return currentBowl;
    }

    /**
     * Identical to Kalaha.doTurn, but also has UI features.
     *
     * @param callerID
     * @throws IOException
     */
    public static void doTurn(int callerID) throws IOException {
        int counter = Kalaha.bowlNumbers[callerID];
        int blink_counter = 0;

        buttons[14].setText(Integer.toString(counter));
        buttons[14].setVisible(true);
        buttons[14].repaint();
        blinktimers = new Timer[counter];
        listeners = new ActionListener[counter];

        int currentBowl = callerID + 1;
        boolean repeatTurn = false;

        Kalaha.bowlNumbers[callerID] = 0;
        buttons[callerID].setText(Integer.toString(0));
        buttons[callerID].repaint();

        while (counter > 0) {
            counter--;
            
            //The main difference is that the buttons are discolored upon placing a ball inside them.
            if (currentBowl < 6) {
                Kalaha.bowlNumbers[currentBowl]++;
                colorButtons(currentBowl, blink_counter, color_background, counter, currentBowl);
            } else if (currentBowl > 6 && currentBowl < 13) {
                Kalaha.bowlNumbers[currentBowl]++;
                colorButtons(currentBowl, blink_counter, color_background, counter, currentBowl);
            } else if ((currentBowl == 6 && Kalaha.yourturn == 0) || (currentBowl == 13 && Kalaha.yourturn == 1)) {
                Kalaha.bowlNumbers[currentBowl]++;
                colorButtons(currentBowl, blink_counter, color_background, counter, currentBowl);
                if (counter == 0) {
                    repeatTurn = true;
                }
            } else {
                currentBowl++;
                currentBowl %= 14;
                Kalaha.bowlNumbers[currentBowl]++;
                colorButtons(currentBowl, blink_counter, color_background, counter, currentBowl);
            }

            currentBowl++;
            currentBowl %= 14;
            blink_counter++;
        }

        if (repeatTurn) {
            Kalaha.yourturn = 1 - Kalaha.yourturn;
        }
        initial_delay = 0;
    }

    /**
     * This method colors the buttons after choosing a bowl.
     */
    public static void colorButtons(int buttonID, int blink_counter, Color color_background, int counter, int currentBowl) throws IOException {

        buttons[buttonID].setContentAreaFilled(true);
        buttons[buttonID].setBackground(javax.swing.plaf.ColorUIResource.BLUE);
        buttons[buttonID].repaint();

        blinktimers[blink_counter] = new Timer(delay, listeners[blink_counter] = (ActionEvent e) -> {
            if (blink_counter > blinktimers.length - 14) {
                buttons[buttonID].setBackground(color_background);
            }
            buttons[14].setText(Integer.toString(Integer.parseInt(buttons[14].getText()) - 1));
            buttons[buttonID].setText(Integer.toString(Integer.parseInt(buttons[buttonID].getText()) + 1));
            buttons[14].repaint();
            buttons[buttonID].repaint();
            if (blink_counter == listeners.length - 1) {
                try {
                    eventHandlerRest(counter, currentBowl);
                } catch (IOException ex) {
                    System.err.println("darn it, freezing");
                }
            }
        });
        blinktimers[blink_counter].setInitialDelay(initial_delay);
        initial_delay += delay;
        blinktimers[blink_counter].setRepeats(false);

        blinktimers[blink_counter].start();
    }

    /**
     * This method starts the turn, and if it's an AI turn, calls the revelant method to choose a bowl.
     * @param whoseTurn
     * @throws IOException 
     */
    public static void turnStarter(int whoseTurn) throws IOException {
        if (Kalaha.isEnded(Kalaha.bowlNumbers)) {
            updateUI();
            newGameMessage();
            return;
        }
        if ((Kalaha.yourturn == 0 && !Kalaha.isplayer1AI) || (Kalaha.yourturn == 1 && !Kalaha.isplayer2AI)) {
            for (int i = 0; i < 6; i++) {
                //Enables only bowls that have one or more balls.
                if (Kalaha.bowlNumbers[i + 7 * whoseTurn] > 0) {
                    buttons[i + 7 * whoseTurn].setEnabled(true);
                }
            }
            options_button.setEnabled(true);
            reset_button.setEnabled(true);
        }
        else {
            Kalaha.doTurn(Kalaha.doRobotTurn());
        }
    }
    
    /**
     * Called upon ending a game.
     * @throws IOException 
     */
    public static void newGameMessage() throws IOException {

        int answer = JOptionPane.CLOSED_OPTION;
        if (Kalaha.bowlNumbers[13] > Kalaha.bowlNumbers[6]) {
            answer = JOptionPane.showConfirmDialog(null, "Good game.\r\nDo you want to play more?",
                    "A not too interesting title", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        }

        if (Kalaha.bowlNumbers[13] < Kalaha.bowlNumbers[6]) {
            answer = JOptionPane.showConfirmDialog(null, "That's supposedly a loss.\r\nDo you want to play more, though?",
                    "Where is the interesting title?", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        }

        if (Kalaha.bowlNumbers[13] == Kalaha.bowlNumbers[6]) {
            answer = JOptionPane.showConfirmDialog(null, "Undecisive.\r\nNew one?",
                    "A rare title, but is it interesting?", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        }

        if (answer == JOptionPane.CANCEL_OPTION || answer == JOptionPane.CLOSED_OPTION) {
            System.exit(0);
        } else {
            Kalaha.reset();
            updateUI();
            turnStarter(Kalaha.yourturn);
        }
    }

    public static void updateUI() throws IOException {
        int counter = 0;
        while (buttons == null) {
            //This is a primitive way to check whether it takes more than 5 seconds
            //  to initialize the UI, but honestly, I have no idea why I did this back then.
            if (counter > 50) {
                System.err.println("Okay that's not happening");
                throw new IOException();
            }
            try {
                Thread.sleep(100);
            } catch (Exception e) {
                System.err.println("Weird but ... happens");
            }
            counter++;
        }
        //Turn buttons off inside this window while updating.
        for (int i = 0; i < buttons.length - 1; i++) {
            buttons[i].setEnabled(false);
            buttons[i].setText(Integer.toString(Kalaha.bowlNumbers[i]));
        }
        reset_button.setEnabled(false);
        options_button.setEnabled(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    // End of variables declaration//GEN-END:variables
}
